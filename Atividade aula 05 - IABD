import numpy as np
import matplotlib.pyplot as plt
from sklearn.linear_model import LinearRegression

# ----------------------------------------
# Exercício 1: Prever o Nível de um Tanque com Vazão
# ----------------------------------------

# Dados de treinamento
vazao = np.array([10, 20, 30, 5, 35, 40]).reshape(-1, 1)  # vazão em m3/min
nivel = np.array([50, 60, 70, 45, 80, 85])  # nível do tanque em metros

# Criar e treinar o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(vazao, nivel)

# Dados de teste
vazao_teste = np.array([5, 2, 7, 30, 50]).reshape(-1, 1)
nivel_previsto = modelo.predict(vazao_teste)

# Imprimir as previsões
print("Exercício 1: Previsão do Nível do Tanque")
for i in range(len(vazao_teste)):
    print(f"Vazão: {vazao_teste[i][0]} m3/min - Nível previsto: {nivel_previsto[i]:.2f} metros")

# Plotar os dados e a linha de regressão
plt.figure(figsize=(14, 10))

plt.subplot(3, 2, 1)
plt.scatter(vazao, nivel, color='blue', label='Dados de Treinamento')
plt.plot(vazao_teste, nivel_previsto, color='red', linestyle='--', marker='o', label='Previsão')
plt.xlabel('Vazão de Água (m3/min)')
plt.ylabel('Nível do Tanque (metros)')
plt.title('Exercício 1: Vazão vs Nível do Tanque')
plt.legend()
plt.grid(True)

# ----------------------------------------
# Exercício 2: Prever a Temperatura de um Forno a partir da Quantidade de Calor Fornecida
# ----------------------------------------

# Dados
Q = np.array([100, 200, 300, 400, 500, 600, 700]).reshape(-1, 1)  # Quantidade de calor
T = np.array([30, 35, 40, 45, 60, 100, 150])  # Temperatura do forno

# Criar e treinar o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(Q, T)

# Dados de teste
Q_teste = np.array([150, 250, 350, 450, 650]).reshape(-1, 1)
T_previsto = modelo.predict(Q_teste)

# Imprimir as previsões
print("\nExercício 2: Previsão da Temperatura do Forno")
for i in range(len(Q_teste)):
    print(f"Calor fornecido: {Q_teste[i][0]} - Temperatura prevista: {T_previsto[i]:.2f} °C")

# Plotar os dados e a linha de regressão
plt.subplot(3, 2, 2)
plt.scatter(Q, T, color='blue', label='Dados de Treinamento')
plt.plot(Q_teste, T_previsto, color='red', linestyle='--', marker='o', label='Previsão')
plt.xlabel('Quantidade de Calor Fornecido')
plt.ylabel('Temperatura do Forno (°C)')
plt.title('Exercício 2: Calor vs Temperatura do Forno')
plt.legend()
plt.grid(True)

# ----------------------------------------
# Exercício 3: Prever o Valor de um Imóvel com Base na Área
# ----------------------------------------

# Dados
A = np.array([50, 100, 120, 300]).reshape(-1, 1)  # Área em m²
Valor = np.array([180000, 300000, 375000, 600000])  # Valor em R$

# Criar e treinar o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(A, Valor)

# Dados de teste
A_teste = np.array([70, 150, 200, 250, 350]).reshape(-1, 1)
Valor_previsto = modelo.predict(A_teste)

# Imprimir as previsões
print("\nExercício 3: Previsão do Valor do Imóvel")
for i in range(len(A_teste)):
    print(f"Área: {A_teste[i][0]} m² - Valor previsto: R${Valor_previsto[i]:,.2f}")

# Plotar os dados e a linha de regressão
plt.subplot(3, 2, 3)
plt.scatter(A, Valor, color='blue', label='Dados de Treinamento')
plt.plot(A_teste, Valor_previsto, color='red', linestyle='--', marker='o', label='Previsão')
plt.xlabel('Área (m²)')
plt.ylabel('Valor do Imóvel (R$)')
plt.title('Exercício 3: Área vs Valor do Imóvel')
plt.legend()
plt.grid(True)

# ----------------------------------------
# Exercício 4: Prever os Gastos dos Clientes com Base no Salário
# ----------------------------------------

# Dados
Renda = np.array([1200, 5000, 8000, 10000, 30000]).reshape(-1, 1)  # Salário
Gastos = np.array([750, 1500, 4000, 6000, 18000])  # Gastos

# Criar e treinar o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(Renda, Gastos)

# Dados de teste
Renda_teste = np.array([1500, 4000, 7000, 12000, 25000]).reshape(-1, 1)
Gastos_previsto = modelo.predict(Renda_teste)

# Imprimir as previsões
print("\nExercício 4: Previsão dos Gastos dos Clientes")
for i in range(len(Renda_teste)):
    print(f"Salário: R${Renda_teste[i][0]} - Gastos previstos: R${Gastos_previsto[i]:,.2f}")

# Plotar os dados e a linha de regressão
plt.subplot(3, 2, 4)
plt.scatter(Renda, Gastos, color='blue', label='Dados de Treinamento')
plt.plot(Renda_teste, Gastos_previsto, color='red', linestyle='--', marker='o', label='Previsão')
plt.xlabel('Salário (R$)')
plt.ylabel('Gastos (R$)')
plt.title('Exercício 4: Salário vs Gastos')
plt.legend()
plt.grid(True)

# ----------------------------------------
# Exercício 5: Prever a Demanda de Energia com Base no Consumo
# ----------------------------------------

# Dados
Consumo = np.array([50, 140, 30, 75, 123]).reshape(-1, 1)  # Consumo em KW
Demanda = np.array([100, 200, 80, 100, 160])  # Demanda em KW

# Criar e treinar o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(Consumo, Demanda)

# Dados de teste
Consumo_teste = np.array([60, 80, 110, 150, 200]).reshape(-1, 1)
Demanda_previsto = modelo.predict(Consumo_teste)

# Imprimir as previsões
print("\nExercício 5: Previsão da Demanda de Energia")
for i in range(len(Consumo_teste)):
    print(f"Consumo: {Consumo_teste[i][0]} KW - Demanda prevista: {Demanda_previsto[i]} KW")

# Plotar os dados e a linha de regressão
plt.subplot(3, 2, 5)
plt.scatter(Consumo, Demanda, color='blue', label='Dados de Treinamento')
plt.plot(Consumo_teste, Demanda_previsto, color='red', linestyle='--', marker='o', label='Previsão')
plt.xlabel('Consumo (KW)')
plt.ylabel('Demanda (KW)')
plt.title('Exercício 5: Consumo vs Demanda de Energia')
plt.legend()
plt.grid(True)

# Ajuste dos subplots
plt.tight_layout()
plt.show()
